
Opinions expressed by Forbes Contributors are their own.

I'm a professor of electrical engineering and public policy at UCLA and a nonresident senior fellow at the Brookings Institution in Washington DC. My work focuses on the nature and growing impact of digital information. I am particularly interested the intersection of digital technology with public policy and the law. You can follow me on Twitter ( @johndvillasenor ).

The decision is the latest chapter in a copyright and patent infringement lawsuit filed by Oracle against Google [see disclosure below] in the Northern District of California back in August 2010, seven months after Oracle completed the acquisition of Sun Microsystems. With the acquisition, Oracle acquired an interest in the Java platform.

Before considering the specifics of Federal Circuit’s decision, it’s helpful to take a step back and consider source code copyright more broadly.

In some circumstances, this tension is relatively easily resolved. Consider a programmer who writes source code to implement a complex weather forecasting model. Models for weather forecasting are not subject to copyright, but the programmer (or, if the programmer is an employee, his or her company) may nonetheless have an enforceable copyright interest in the specific code written to perform that task.

However, not all examples follow this pattern. Consider a line of code that adds two numbers together. There aren’t very many different ways of indicating addition. It would make no sense to allow an author who publishes a line of code like “z = x + y” in a book on programming to prevent all readers of the book from using a similar expression when writing their own code to add two numbers.

To sort through these sorts of issues in source code (and other) copyright infringement cases, courts typically engage in a “filtration” exercise, starting with a full body of work and then identifying those components of the work—material subject to the merger and other doctrines, processes, public domain material, etc.—that aren’t subject to a copyright holder’s exclusive control. (The specific analysis varies with circuit; in Oracle v. Google the Federal Circuit applied its interpretation of Ninth Circuit law.) Once the filtration is completed, an infringement analysis can be performed.

This is what both the district court in California and the Federal Circuit did in Oracle v. Google. But while the district court found the Java APIs ineligible for copyright protection, the Federal Circuit, which at this point has the last word, reached the opposite conclusion.

* Of the 37 API packages to which Oracle was found to hold the copyright, three are “core” packages that are considered essential to the use of the Java programming language. There is little likelihood that Oracle will attempt to use the Federal Circuit’s ruling to stop everyone from using these three modules, and thus, in effect, to stop using Java. But there is plenty of downside to a precedent that gives any one company that level of power, even when unexercised, over an entire programming language.

In the Federal Circuit’s defense, the ruling acknowledged that it “seems possible that the merger doctrine, when properly analyzed, would exclude the three packages identified by the district court as core packages from the scope of actionable infringing conduct.” In other words, an opportunity to argue for specifically excluding those three packages from an infringement finding was available, but, as the court wrote, Google “does not try to differentiate among the packages for purposes of its copyrightability analysis and does not appeal the infringement verdict as to the packages.” Reasonable people can disagree on whether Google should have raised stronger arguments regarding the three core packages. At this point, however, that’s water under the bridge; for better or (far more likely) for worse, those packages have been deemed copyrightable.

But what end would these sorts of gymnastics really serve other than to confuse programmers and others who might read their code? There are certain terms that tend to be used for certain things in programming, and it makes little sense to use copyright law to scare programmers away from naming things in the most logical, understandable, and consistent way. Unfortunately, that is exactly what the Federal Circuit’s ruling may do.

With this setup, one expects to see examples of short phrases from Oracle’s source code that the Federal Circuit considered creative (and “max” for finding the larger of two numbers certainly wouldn’t qualify). But instead, the discussion abruptly shifts gears, observing that the “manner in which [short phrases] are used or strung together” can exhibit creativity. That’s true of course, but it leaves unresolved the question of why the court was discussing the standalone copyrightability of short phrases in the context of Oracle’s source code.

But the “I” in API stands for “interface.” APIs are written with interoperability with other software as a central design goal. As Berkeley law professor Pamela Samuelson has written , once an API exists, “it becomes a constraint on the design of follow-on programs developed to interoperate with it.” Those constraints impact function, which is outside the scope of copyright protection.

* The Federal Circuit’s ruling elevates copyright protection of the “structure, sequence, and organization” of source code to a level that is certain to create collisions with functionality not protectable by copyright. The structure, sequence, and organization of source code are intricately tied to the function it performs. There are many choices available to a programmer, but also many ways in which choice is constrained by the specifics of the processing and the programming language. The Federal Circuit’s holding risks creating a new class of copyright plaintiffs intent on using perceived structural similarities in all manner of software products as grounds to demand copyright royalties.

* The Federal Circuit’s decision to explicitly affirm copyright protection to all of the API “declaration code” at issue is problematic. In Java and many other programming languages, declaration code provides what amounts to a framework for what the court calls the “implementation code” that actually performs the computations of interest. Much of that framework is determined not by the programmer, but by the syntactical constraints of the language he or she is using. Declaration code in Java contains plenty of instances of phrases like “public class” and “public static int” that are part of the language itself, and clearly not copyrightable. Much of the remaining declaration code consists of short phrases or other text constrained by the function of the implementing code. Perhaps there are some declarations that are creative enough (and sufficiently free of functional constraints) to warrant copyright protection, but it is exceedingly unlikely that all of the declaration code at issue in the Oracle v. Google merits the level of copyright protection that the Federal Circuit has granted.

* The Federal Circuit remanded the question of fair use back to the district court for further proceedings. Fair use in this context is an interesting and important question, and both Oracle and Google will have some reasonable arguments at their disposal. In arguing against fair use, Oracle will likely cite the commercial nature and enormous market penetration of Android. In taking the other side, Google will likely assert that its use of the APIs in question was transformative.

Having noted all of the above, it’s also important to acknowledge the complexity of the questions that courts can confront when considering source code copyright. This can lead different judges to arrive at very different conclusions regarding copyrightability. There is a wide spectrum between the diametrically opposing positions taken by the district court (that the APIs aren’t copyrightable at all) and the Federal Circuit (that they are). The right answer is probably much closer to the district court’s position than to that taken by the Federal Circuit.

The three core API packages likely do not deserve copyright protection. Many aspects of the remaining 34 packages probably don’t deserve such protection either—especially to the extent that they implement common functions (such as “max”) that leave little flexibility to the programmer.

Disclosure: I oversee a small Google-funded project at UCLA addressing child Internet safety.
